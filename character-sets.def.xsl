<?xml version="1.0"?>
<xsl:stylesheet	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"
				xmlns:assignments="http://www.iana.org/assignments">
	<xsl:output method="text" encoding="us-ascii"/>
	<xsl:variable name="lwr" select="'abcdefghijklmnopqrstuvwxyz'"/>
	<xsl:variable name="upr" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"/>
	<xsl:template match="/assignments:registry">
		<xsl:text>; Generated by character-sets.def.xsl&#xa;</xsl:text>
		<xsl:text>EXPORTS&#xa;</xsl:text>
		<xsl:apply-templates select="assignments:registry"/>
	</xsl:template>
	<xsl:template match="assignments:registry">
		<xsl:apply-templates select="assignments:record"/>
	</xsl:template>
	<xsl:template match="assignments:record">
		<xsl:call-template name="StripLeadingZeros">
			<xsl:with-param name="value" select="translate(assignments:name, $upr, $lwr)"/>
		</xsl:call-template>
		<xsl:text> = $</xsl:text>
		<xsl:value-of select="assignments:value"/>
		<xsl:text>&#xa;</xsl:text>
		<xsl:apply-templates select="assignments:alias"/>
	</xsl:template>
	<xsl:template match="assignments:alias">
		<xsl:choose>
			<xsl:when test="contains(.,'&#xa;')">
				<xsl:call-template name="StripLeadingZeros">
					<xsl:with-param name="value" select="translate(substring-before(., '&#xa;'), $upr, $lwr)"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="StripLeadingZeros">
					<xsl:with-param name="value" select="translate(., $upr, $lwr)"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:text> = $</xsl:text>
		<xsl:value-of select="../assignments:value"/>
		<xsl:text>&#xa;</xsl:text>
	</xsl:template>
	<xsl:template name="StripLeadingZeros">
		<xsl:param name="value"/>
		<xsl:choose>
			<xsl:when test="contains($value, '0')">
				<xsl:variable name="head" select="substring-before($value, '0')"/>
				<xsl:variable name="tail" select="substring-after($value, '0')"/>
				<xsl:value-of select="translate($head, '&#xa;', '0')"/>
				<xsl:choose>
					<!-- significant digit at end of $head -->
					<xsl:when test="$head != '' and contains('&#xa;123456789', substring($head, string-length($head)))">
						<xsl:call-template name="StripLeadingZeros">
							<xsl:with-param name="value" select="concat('&#xa;', $tail)"/>
						</xsl:call-template>
					</xsl:when>
					<!-- single zero between non-digits -->
					<xsl:when test="not(contains('0123456789', substring($tail, 1, 1)))">
						<xsl:call-template name="StripLeadingZeros">
							<xsl:with-param name="value" select="concat('&#xa;', $tail)"/>
						</xsl:call-template>
					</xsl:when>
					<xsl:otherwise>
						<xsl:call-template name="StripLeadingZeros">
							<xsl:with-param name="value" select="$tail"/>
						</xsl:call-template>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="translate($value, '&#xa;', '0')"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="*">
	</xsl:template>
</xsl:stylesheet>
